<?php

namespace SQL\Test;

use SQL\Test\Fixtures\PDOTestCase;
use SQL\SelectQueryBuilder;

/**
 * Test class for SelectQueryBuilder.
 * Generated by PHPUnit on 2011-09-21 at 16:41:24.
 */
class SelectQueryBuilderTest extends PDOTestCase
{

    /**
     * @var \SQL\SelectQueryBuilder
     */
    protected $queryBuilder;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->queryBuilder = new SelectQueryBuilder(self::$pdo);
    }

    /**
     * @dataProvider fromProvider
     */
    public function testFrom($table, $alias)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->from($table, $alias));
        $this->assertEquals($table, $this->queryBuilder->getFromTable());
        $this->assertEquals($alias, $this->queryBuilder->getFromAlias());
        $this->assertEquals(array('table' => $table, 'alias' => $alias), $this->queryBuilder->getFromPart());
    }

    public function fromProvider()
    {
        return array(
            array('book', null),
            array('author', null),
            array('book', 'b'),
            array('author', 'a'),
        );
    }

    /**
     * @dataProvider joinProvider
     */
    public function testJoin($joins, $expected)
    {
        foreach ($joins as $join)
        {
            $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->join($join[0], $join[1], $join[2], $join[3]));
        }

        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }

    public function joinProvider()
    {
        return array(
            array(
                array(
                    array(null, null, null, null),
                ),
                array(
                )
            ),
            array(
                array(
                    array('book', 'b', 'a.id = b.author_id', null),
                ),
                array(
                    array(
                        'table' => 'book',
                        'criteria' => array(
                            'a.id = b.author_id'
                        ),
                        'type' => SelectQueryBuilder::INNER_JOIN,
                        'alias' => 'b'
                    ),
                )
            ),
            array(
                array(
                    array('book', 'b', 'a.id = b.author_id', SelectQueryBuilder::INNER_JOIN),
                ),
                array(
                    array(
                        'table' => 'book',
                        'criteria' => array(
                            'a.id = b.author_id'
                        ),
                        'type' => SelectQueryBuilder::INNER_JOIN,
                        'alias' => 'b'
                    ),
                )
            ),
            array(
                array(
                    array('edition', 'e', array('e.version = b.version', 'e.year = b.year'), SelectQueryBuilder::LEFT_JOIN),
                ),
                array(
                    array(
                        'table' => 'edition',
                        'criteria' => array(
                            'e.version = b.version',
                            'e.year = b.year'
                        ),
                        'type' => SelectQueryBuilder::LEFT_JOIN,
                        'alias' => 'e'
                    ),
                )
            ),
            array(
                array(
                    array('book', 'b', 'a.id = b.author_id', SelectQueryBuilder::RIGHT_JOIN),
                    array('edition', 'e', array('e.version = b.version', 'e.year = b.year'), SelectQueryBuilder::LEFT_JOIN),
                ),
                array(
                    array(
                        'table' => 'book',
                        'criteria' => array(
                            'a.id = b.author_id'
                        ),
                        'type' => SelectQueryBuilder::RIGHT_JOIN,
                        'alias' => 'b'
                    ),
                    array(
                        'table' => 'edition',
                        'criteria' => array(
                            'e.version = b.version',
                            'e.year = b.year'
                        ),
                        'type' => SelectQueryBuilder::LEFT_JOIN,
                        'alias' => 'e'
                    ),
                )
            ),
        );
    }

    public function testInnerJoin()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->innerJoin('book', 'b', 'a.id = b.author_id'));
        $expected = array(
            array(
                'table' => 'book',
                'criteria' => array(
                    'a.id = b.author_id'
                ),
                'type' => SelectQueryBuilder::INNER_JOIN,
                'alias' => 'b'
            ),
        );

        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }

    public function testLeftJoin()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->leftJoin('book', 'b', 'a.id = b.author_id'));
        $expected = array(
            array(
                'table' => 'book',
                'criteria' => array(
                    'a.id = b.author_id'
                ),
                'type' => SelectQueryBuilder::LEFT_JOIN,
                'alias' => 'b'
            ),
        );

        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }

    public function testRightJoin()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->rightJoin('book', 'b', 'a.id = b.author_id'));
        $expected = array(
            array(
                'table' => 'book',
                'criteria' => array(
                    'a.id = b.author_id'
                ),
                'type' => SelectQueryBuilder::RIGHT_JOIN,
                'alias' => 'b'
            ),
        );

        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }

    /**
     * @dataProvider GetFromStringProvider
     */
    public function testGetFromString($table, $alias, $joins, $expected, $expectedFormatted)
    {
        $this->queryBuilder->from($table, $alias);

        foreach ($joins as $join)
        {
            $this->queryBuilder->join($join[0], $join[1], $join[2], $join[3]);
        }

        $this->assertEquals($expected, $this->queryBuilder->getFromString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getFromString(true));
    }

    public function GetFromStringProvider()
    {
        return array(
            array(
                'book',
                null,
                array(),
                'FROM book ',
                'FROM book '."\n",
            ),
            array(
                'book',
                'b',
                array(),
                'FROM book AS b ',
                'FROM book AS b '."\n",
            ),
            array(
                'author',
                'a',
                array(
                    array('book', 'b', 'a.id = b.author_id', null),
                ),
                'FROM author AS a INNER JOIN book AS b ON a.id = b.author_id ',
                'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n",
            ),
            array(
                'author',
                'a',
                array(
                    array('book', 'b', 'a.id = b.author_id', SelectQueryBuilder::RIGHT_JOIN),
                    array('edition', 'e', array('e.version = b.version', 'e.year = b.year'), SelectQueryBuilder::LEFT_JOIN),
                ),
                'FROM author AS a RIGHT JOIN book AS b ON a.id = b.author_id LEFT JOIN edition AS e ON e.version = b.version AND e.year = b.year ',
                'FROM author AS a '."\n".'RIGHT JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'LEFT JOIN edition AS e '."\n".'ON e.version = b.version '."\n".'AND e.year = b.year '."\n",
            ),
            array(
                'author',
                'a',
                array(
                    array('book', 'b', 'a.id = b.author_id', null),
                    array('reward', 'r', 'author_id', SelectQueryBuilder::LEFT_JOIN),
                ),
                'FROM author AS a INNER JOIN book AS b ON a.id = b.author_id LEFT JOIN reward AS r ON b.author_id = r.author_id ',
                'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'LEFT JOIN reward AS r '."\n".'ON b.author_id = r.author_id '."\n",
            ),
            array(
                'book',
                'b',
                array(
                    array('reward', 'r', 'author_id', null),
                ),
                'FROM book AS b INNER JOIN reward AS r ON b.author_id = r.author_id ',
                'FROM book AS b '."\n".'INNER JOIN reward AS r '."\n".'ON b.author_id = r.author_id '."\n",
            ),
        );
    }

    /**
     *
     * @dataProvider groupByProvider
     */
    public function testGroupBy($column, $order, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->groupBy($column, $order));
        $this->assertEquals($expected, $this->queryBuilder->getGroupByParts());
    }

    public function groupByProvider()
    {
        return array(
            array(
                null,
                null,
                array(
                )
            ),
            array(
                'id',
                null,
                array(
                    array('column' => 'id', 'order' => null),
                )
            ),
            array(
                'year',
                SelectQueryBuilder::ASC,
                array(
                    array('column' => 'year', 'order' => SelectQueryBuilder::ASC),
                )
            ),
            array(
                'id',
                SelectQueryBuilder::DESC,
                array(
                    array('column' => 'id', 'order' => SelectQueryBuilder::DESC),
                )
            ),
        );
    }

    /**
     *
     * @dataProvider getGroupByStringProvider
     */
    public function testGetGroupByString($groupBys, $expected, $expectedFormatted)
    {
        foreach ($groupBys as $groupBy)
        {
            $this->queryBuilder->groupBy($groupBy[0], $groupBy[1]);
        }

        $this->assertEquals($expected, $this->queryBuilder->getGroupByString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getGroupByString(true));
    }

    public function getGroupByStringProvider()
    {
        return array(
            array(
                array(
                    array('year', null),
                ),
                'GROUP BY year ',
                'GROUP BY year '."\n",
            ),
            array(
                array(
                    array('id', null),
                    array('year', null),
                ),
                'GROUP BY id, year ',
                'GROUP BY id, year '."\n",
            ),
            array(
                array(
                    array('year', null),
                    array('id', SelectQueryBuilder::ASC),
                ),
                'GROUP BY year, id ASC ',
                'GROUP BY year, id ASC '."\n",
            ),
            array(
                array(
                    array('id', SelectQueryBuilder::DESC),
                    array('year', SelectQueryBuilder::ASC),
                ),
                'GROUP BY id DESC, year ASC ',
                'GROUP BY id DESC, year ASC '."\n",
            ),
        );
    }

    /**
     *
     * @dataProvider orderByProvider
     */
    public function testOrderBy($column, $order, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->orderBy($column, $order));
        $this->assertEquals($expected, $this->queryBuilder->getOrderByParts());
    }

    public function orderByProvider()
    {
        return array(
            array(
                null,
                null,
                array(
                )
            ),
            array(
                'id',
                'truc',
                array(
                    array('column' => 'id', 'order' => SelectQueryBuilder::ASC),
                )
            ),
            array(
                'id',
                null,
                array(
                    array('column' => 'id', 'order' => SelectQueryBuilder::ASC),
                )
            ),
            array(
                'year',
                SelectQueryBuilder::ASC,
                array(
                    array('column' => 'year', 'order' => SelectQueryBuilder::ASC),
                )
            ),
            array(
                'id',
                SelectQueryBuilder::DESC,
                array(
                    array('column' => 'id', 'order' => SelectQueryBuilder::DESC),
                )
            ),
        );
    }

    /**
     *
     * @dataProvider getOrderByStringProvider
     */
    public function testGetOrderByString($orderBys, $expected, $expectedFormatted)
    {
        foreach ($orderBys as $orderBy)
        {
            $this->queryBuilder->orderBy($orderBy[0], $orderBy[1]);
        }
        $this->assertEquals($expected, $this->queryBuilder->getOrderByString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getOrderByString(true));
    }

    public function getOrderByStringProvider()
    {
        return array(
            array(
                array(
                    array(null, null),
                ),
                '',
                '',
            ),
            array(
                array(
                    array('id', null),
                ),
                'ORDER BY id ASC ',
                'ORDER BY id ASC '."\n",
            ),
            array(
                array(
                    array('id', SelectQueryBuilder::ASC),
                ),
                'ORDER BY id ASC ',
                'ORDER BY id ASC '."\n",
            ),
            array(
                array(
                    array('id', SelectQueryBuilder::DESC),
                ),
                'ORDER BY id DESC ',
                'ORDER BY id DESC '."\n",
            ),
            array(
                array(
                    array('id', SelectQueryBuilder::ASC),
                    array('year', SelectQueryBuilder::DESC),
                ),
                'ORDER BY id ASC, year DESC ',
                'ORDER BY id ASC, year DESC '."\n",
            ),
        );
    }

    /**
     *
     * @dataProvider limitProvider
     */
    public function testLimit($limit, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->limit($limit));
        $this->assertEquals($expected, $this->queryBuilder->getLimit());
    }

    public function limitProvider()
    {
        return array(
            array(null, 0),
            array(5, 5),
        );
    }

    /**
     *
     * @dataProvider offsetProvider
     */
    public function testOffset($offset, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->offset($offset));
        $this->assertEquals($expected, $this->queryBuilder->getOffset());
    }

    public function offsetProvider()
    {
        return array(
            array(null, 0),
            array(1, 1),
        );
    }

    /**
     *
     * @dataProvider getLimitStringProvider
     */
    public function testGetLimitString($limit, $expected, $expectedFormatted)
    {
        if (!empty($limit))
        {
            $this->queryBuilder->limit($limit[0]);
            if (isset($limit[1]))
            {
                $this->queryBuilder->offset($limit[1]);
            }
        }

        $this->assertEquals($expected, $this->queryBuilder->getLimitString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getLimitString(true));
    }

    public function getLimitStringProvider()
    {
        return array(
            array(
                array(0, null),
                '',
                '',
            ),
            array(
                array(5, null),
                'LIMIT 5 OFFSET 0 ',
                'LIMIT 5 '."\n".'OFFSET 0 '."\n",
            ),
            array(
                array(5, 10),
                'LIMIT 5 OFFSET 10 ',
                'LIMIT 5 '."\n".'OFFSET 10 '."\n",
            ),
        );
    }

    public function testDistinct()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->distinct());
        $this->assertEquals(array('DISTINCT'), $this->queryBuilder->getOptions());
    }

    public function testCalcFoundRows()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->calcFoundRows());
        $this->assertEquals(array('SQL_CALC_FOUND_ROWS'), $this->queryBuilder->getOptions());
    }

    /**
     *
     * @dataProvider selectProvider
     */
    public function testSelect($column, $alias, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->select($column, $alias));
        $this->assertEquals($expected, $this->queryBuilder->getSelectParts());
    }

    public function selectProvider()
    {
        return array(
            array(
                null,
                null,
                array(),
            ),
            array(
                'id',
                null,
                array(
                    'id' => null,
                ),
            ),
            array(
                'CONCAT(firstname, lastname)',
                'name',
                array(
                    'CONCAT(firstname, lastname)' => 'name',
                ),
            ),
            array(
                array(
                    'id' => null,
                    'year',
                    'CONCAT(firstname, lastname)' => 'name',
                ),
                null,
                array(
                    'id' => null,
                    'year' => null,
                    'CONCAT(firstname, lastname)' => 'name',
                ),
            ),
        );
    }

    /**
     *
     * @dataProvider getSelectStringProvider
     */
    public function testGetSelectString($selects, $options, $expected, $expectedFormatted)
    {
        foreach ($selects as $select)
        {
            $this->queryBuilder->select($select[0], $select[1]);
        }

        foreach ($options as $option)
        {
            $this->queryBuilder->addOption($option);
        }

        $this->assertEquals($expected, $this->queryBuilder->getSelectString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getSelectString(true));
    }

    public function getSelectStringProvider()
    {
        return array(
            array(
                array(
                ),
                array(
                ),
                'SELECT * ',
                'SELECT * '."\n",
            ),
            array(
                array(
                    array('id', null,),
                    array('year', null,),
                    array('CONCAT(firstname, lastname)', 'name',),
                ),
                array(
                ),
                'SELECT id, year, CONCAT(firstname, lastname) AS name ',
                'SELECT id, year, CONCAT(firstname, lastname) AS name '."\n",
            ),
            array(
                array(
                    array('start_date', 'date',),
                ),
                array(
                    'DISTINCT',
                ),
                'SELECT DISTINCT start_date AS date ',
                'SELECT DISTINCT start_date AS date '."\n",
            ),
        );
    }

    /**
     *
     * @dataProvider havingProvider
     */
    public function testHaving($column, $value, $operator, $connector, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->having($column, $value, $operator, $connector));
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testHavingBetweenException()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->having('id', 5, SelectQueryBuilder::BETWEEN));
    }

    public function testAndHaving()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->andHaving('id', 1, SelectQueryBuilder::EQUALS));
        $expected = array(
            array(
                'column' => 'id',
                'value' => 1,
                'operator' => SelectQueryBuilder::EQUALS,
                'connector' => SelectQueryBuilder::LOGICAL_AND,
            ),
        );
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }

    public function testOrHaving()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->orHaving('id', 1, SelectQueryBuilder::EQUALS));
        $expected = array(
            array(
                'column' => 'id',
                'value' => 1,
                'operator' => SelectQueryBuilder::EQUALS,
                'connector' => SelectQueryBuilder::LOGICAL_OR,
            ),
        );
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }

    public function havingProvider()
    {
        return array(
            array(
                'id',
                1,
                null,
                null,
                array(
                    array(
                        'column' => 'id',
                        'value' => 1,
                        'operator' => SelectQueryBuilder::EQUALS,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'id',
                1,
                SelectQueryBuilder::GREATER_THAN_OR_EQUAL,
                SelectQueryBuilder::LOGICAL_OR,
                array(
                    array(
                        'column' => 'id',
                        'value' => 1,
                        'operator' => SelectQueryBuilder::GREATER_THAN_OR_EQUAL,
                        'connector' => SelectQueryBuilder::LOGICAL_OR,
                    ),
                ),
            ),
            array(
                'published_at',
                null,
                SelectQueryBuilder::IS_NULL,
                null,
                array(
                    array(
                        'column' => 'published_at',
                        'value' => null,
                        'operator' => SelectQueryBuilder::IS_NULL,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'id',
                array(2, 5),
                SelectQueryBuilder::BETWEEN,
                SelectQueryBuilder::LOGICAL_AND,
                array(
                    array(
                        'column' => 'id',
                        'value' => array(2, 5),
                        'operator' => SelectQueryBuilder::BETWEEN,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'title',
                array('Dune', 'Fahrenheit 451'),
                SelectQueryBuilder::IN,
                null,
                array(
                    array(
                        'column' => 'title',
                        'value' => array('Dune', 'Fahrenheit 451'),
                        'operator' => SelectQueryBuilder::IN,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'title',
                'Dune',
                SelectQueryBuilder::IN,
                null,
                array(
                    array(
                        'column' => 'title',
                        'value' => array('Dune'),
                        'operator' => SelectQueryBuilder::IN,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
        );
    }

    /**
     * @dataProvider openHavingProvider
     */
    public function testOpenHaving($connector, $expected)
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->openHaving($connector));
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }

    public function openHavingProvider()
    {
        return array(
            array(
                null,
                array(
                    Array(
                        'bracket' => SelectQueryBuilder::BRACKET_OPEN,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    )
                ),
            ),
            array(
                SelectQueryBuilder::LOGICAL_AND,
                array(
                    Array(
                        'bracket' => SelectQueryBuilder::BRACKET_OPEN,
                        'connector' => SelectQueryBuilder::LOGICAL_AND,
                    )
                ),
            ),
            array(
                SelectQueryBuilder::LOGICAL_OR,
                array(
                    Array(
                        'bracket' => SelectQueryBuilder::BRACKET_OPEN,
                        'connector' => SelectQueryBuilder::LOGICAL_OR,
                    )
                ),
            ),
        );
    }

    public function testCloseHaving()
    {
        $this->assertInstanceOf('SQL\SelectQueryBuilder', $this->queryBuilder->closeHaving());
        $expected = array(
            Array(
                'bracket' => SelectQueryBuilder::BRACKET_CLOSE,
                'connector' => null,
            )
        );
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }

    /**
     *
     * @dataProvider getHavingStringProvider
     */
    public function testGetHavingString($havings, $expected, $expectedFormatted, $expectedBoundParameters)
    {
        foreach ($havings as $having)
        {
            $nbHaving = count($having);
            if ($nbHaving == 4)
            {
                $this->queryBuilder->having($having[0], $having[1], $having[2], $having[3]);
            }
            elseif ($nbHaving >= 1 && $nbHaving <= 2)
            {
                if ($having[0] == '(')
                {
                    if (isset($having[1]))
                    {
                        $this->queryBuilder->openHaving($having[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openHaving();
                    }
                }
                elseif ($having[0] == ')')
                {
                    $this->queryBuilder->closeHaving();
                }
            }
        }

        $this->assertEquals($expected, $this->queryBuilder->getHavingString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getHavingString(true));
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters());
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters(false, 'having'));
        $this->assertEquals(array(), $this->queryBuilder->getBoundParameters(false, 'where'));
    }

    public function getHavingStringProvider()
    {
        return array(
            array(
                array(
                    array('id', 1, null, null),
                ),
                'HAVING id = ? ',
                'HAVING id = ? '."\n",
                array(
                    1,
                ),
            ),
            array(
                array(
                    array('id', 1, SelectQueryBuilder::NOT_EQUALS, null),
                ),
                'HAVING id != ? ',
                'HAVING id != ? '."\n",
                array(
                    1,
                ),
            ),
            array(
                array(
                    array('published_at', null, SelectQueryBuilder::IS_NULL, null),
                ),
                'HAVING published_at IS NULL ',
                'HAVING published_at IS NULL '."\n",
                array(
                ),
            ),
            array(
                array(
                    array('published_at', null, SelectQueryBuilder::IS_NOT_NULL, null),
                ),
                'HAVING published_at IS NOT NULL ',
                'HAVING published_at IS NOT NULL '."\n",
                array(
                ),
            ),
            array(
                array(
                    array('score', array(8, 15), SelectQueryBuilder::BETWEEN, null),
                ),
                'HAVING score BETWEEN ? AND ? ',
                'HAVING score BETWEEN ? AND ? '."\n",
                array(
                    8,
                    15,
                ),
            ),
            array(
                array(
                    array('score', array(8, 15), SelectQueryBuilder::NOT_BETWEEN, null),
                ),
                'HAVING score NOT BETWEEN ? AND ? ',
                'HAVING score NOT BETWEEN ? AND ? '."\n",
                array(
                    8,
                    15,
                ),
            ),
            array(
                array(
                    array('score', array(8, 12, 10, 9, 15), SelectQueryBuilder::IN, null),
                ),
                'HAVING score IN (?, ?, ?, ?, ?) ',
                'HAVING score IN (?, ?, ?, ?, ?) '."\n",
                array(8, 12, 10, 9, 15),
            ),
            array(
                array(
                    array('score', array(8, 12, 10, 9, 15), SelectQueryBuilder::NOT_IN, null),
                ),
                'HAVING score NOT IN (?, ?, ?, ?, ?) ',
                'HAVING score NOT IN (?, ?, ?, ?, ?) '."\n",
                array(8, 12, 10, 9, 15),
            ),
            array(
                array(
                    array('id', 1, SelectQueryBuilder::NOT_EQUALS, null),
                    array('score', array(8, 12, 10, 9, 15), SelectQueryBuilder::IN, null),
                ),
                'HAVING id != ? AND score IN (?, ?, ?, ?, ?) ',
                'HAVING id != ? '."\n".'AND score IN (?, ?, ?, ?, ?) '."\n",
                array(1, 8, 12, 10, 9, 15),
            ),
            array(
                array(
                    array('score', 5, SelectQueryBuilder::LESS_THAN_OR_EQUAL, null),
                    array('score', 9, SelectQueryBuilder::GREATER_THAN_OR_EQUAL, SelectQueryBuilder::LOGICAL_OR),
                ),
                'HAVING score <= ? OR score >= ? ',
                'HAVING score <= ? '."\n".'OR score >= ? '."\n",
                array(5, 9),
            ),
            array(
                array(
                    array('title', 'Dune', SelectQueryBuilder::NOT_EQUALS, null),
                    array(SelectQueryBuilder::BRACKET_OPEN, SelectQueryBuilder::LOGICAL_OR),
                    array('score', 5, SelectQueryBuilder::GREATER_THAN_OR_EQUAL, null),
                    array('score', 10, SelectQueryBuilder::LESS_THAN_OR_EQUAL, SelectQueryBuilder::LOGICAL_AND),
                    array(SelectQueryBuilder::BRACKET_CLOSE),
                ),
                'HAVING title != ? OR ( score >= ? AND score <= ? ) ',
                'HAVING title != ? '."\n".'OR '."\n".'( '."\n".'    score >= ? '."\n".'    AND score <= ? '."\n".') '."\n",
                array('Dune', 5, 10),
            ),
            array(
                array(
                    array('title', 'Dune', SelectQueryBuilder::NOT_EQUALS, null),
                    array(SelectQueryBuilder::BRACKET_OPEN, SelectQueryBuilder::LOGICAL_OR),
                    array('score', 5, SelectQueryBuilder::GREATER_THAN_OR_EQUAL, null),
                    array('score', 10, SelectQueryBuilder::LESS_THAN_OR_EQUAL, SelectQueryBuilder::LOGICAL_AND),
                    array(SelectQueryBuilder::BRACKET_OPEN, SelectQueryBuilder::LOGICAL_OR),
                    array('published_at', '2011-10-02 00:00:00', SelectQueryBuilder::EQUALS, null),
                    array(SelectQueryBuilder::BRACKET_CLOSE),
                    array(SelectQueryBuilder::BRACKET_CLOSE),
                ),
                'HAVING title != ? OR ( score >= ? AND score <= ? OR ( published_at = ? ) ) ',
                'HAVING title != ? '."\n".'OR '."\n".'( '."\n".'    score >= ? '."\n".'    AND score <= ? '."\n".'    OR '."\n".'    ( '."\n".'        published_at = ? '."\n".'    ) '."\n".') '."\n",
                array('Dune', 5, 10, '2011-10-02 00:00:00'),
            ),
        );
    }

    public function testWhere()
    {
        $this->assertInstanceOf('SQL\BaseWhereQueryBuilder', $this->queryBuilder->Where('id', 1, SelectQueryBuilder::EQUALS, SelectQueryBuilder::LOGICAL_AND));
    }

    public function testAndWhere()
    {
        $this->assertInstanceOf('SQL\BaseWhereQueryBuilder', $this->queryBuilder->andWhere('id', 1, SelectQueryBuilder::EQUALS));
    }

    public function testOrWhere()
    {
        $this->assertInstanceOf('SQL\BaseWhereQueryBuilder', $this->queryBuilder->orWhere('id', 1, SelectQueryBuilder::EQUALS));
    }
    
    /**
     * @dataProvider getQueryStringProvider
     */
    public function testGetQueryString($selects, $from, $joins, $wheres, $groupBys, $havings, $orderBys, $limit, $expectedQuery, $expectedFormattedQuery, $expectedBoundParameters, $expectedQuotedBoundParameters, $expectedDebuggedQuery)
    {
        foreach ($selects as $select)
        {
            $this->queryBuilder->select($select[0], isset($select[1]) ? $select[1] : null);
        }

        if (!empty($from))
        {
            $this->queryBuilder->from($from[0], isset($from[1]) ? $from[1] : null);
        }

        foreach ($joins as $join)
        {
            $this->queryBuilder->join($join[0], isset($join[1]) ? $join[1] : null, isset($join[2]) ? $join[2] : null, isset($join[3]) ? $join[3] : null);
        }

        foreach ($wheres as $where)
        {
            $nbWhere = count($where);
            if ($nbWhere == 4)
            {
                $this->queryBuilder->where($where[0], $where[1], $where[2], $where[3]);
            }
            elseif ($nbWhere >= 1 && $nbWhere <= 2)
            {
                if ($where[0] == '(')
                {
                    if (isset($where[1]))
                    {
                        $this->queryBuilder->openWhere($where[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openWhere();
                    }
                }
                elseif ($where[0] == ')')
                {
                    $this->queryBuilder->closeWhere();
                }
            }
        }

        foreach ($groupBys as $groupBy)
        {
            $this->queryBuilder->groupBy($groupBy[0], $groupBy[1]);
        }

        foreach ($havings as $having)
        {
            $nbHaving = count($having);
            if ($nbHaving == 4)
            {
                $this->queryBuilder->having($having[0], $having[1], $having[2], $having[3]);
            }
            elseif ($nbHaving >= 1 && $nbHaving <= 2)
            {
                if ($having[0] == '(')
                {
                    if (isset($having[1]))
                    {
                        $this->queryBuilder->openHaving($having[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openHaving();
                    }
                }
                elseif ($having[0] == ')')
                {
                    $this->queryBuilder->closeHaving();
                }
            }
        }

        foreach ($orderBys as $orderBy)
        {
            $this->queryBuilder->orderBy($orderBy[0], $orderBy[1]);
        }

        if (!empty($limit))
        {
            $this->queryBuilder->limit($limit[0]);
            if (isset($limit[1]))
            {
                $this->queryBuilder->offset($limit[1]);
            }
        }

        $this->assertEquals($expectedQuery, $this->queryBuilder->getQueryString());
        $this->assertEquals($expectedQuery, (string) $this->queryBuilder);
        $this->assertEquals($expectedFormattedQuery, $this->queryBuilder->getQueryString(true));
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters());
        $this->assertEquals($expectedQuotedBoundParameters, $this->queryBuilder->getBoundParameters(true));
        $this->assertEquals($expectedDebuggedQuery, $this->queryBuilder->debug());
    }

    public function getQueryStringProvider()
    {
        return array(
            array(
                //select
                array(),
                //from
                array(),
                //joins
                array(),
                //wheres
                array(),
                //groupBys
                array(),
                //havings
                array(),
                //orderBys
                array(),
                //limit
                array(),
                //expectedQuery
                '',
                //expectedFormattedQuery
                '',
                //expectedBoundParameters
                array(),
                //expectedQuotedBoundParameters
                array(),
                //expectedDebuggedQuery
                '',
            ),
            array(
                //select
                array(),
                //from
                array('book'),
                //joins
                array(),
                //wheres
                array(
                    array('title', 'l\'île au trésor', null, null),
                ),
                //groupBys
                array(),
                //havings
                array(),
                //orderBys
                array(),
                //limit
                array(),
                //expectedQuery
                'SELECT * FROM book WHERE title = ? ',
                //expectedFormattedQuery
                'SELECT * '."\n".'FROM book '."\n".'WHERE title = ? '."\n",
                //expectedBoundParameters
                array('l\'île au trésor'),
                //expectedQuotedBoundParameters
                array('\'l\'\'île au trésor\''),
                //expectedDebuggedQuery
                'SELECT * '."\n".'FROM book '."\n".'WHERE title = \'l\'\'île au trésor\' '."\n",
            ),
            array(
                //select
                array(
                    array('a.first_name'),
                    array('a.last_name'),
                    array('count(b.id)', 'books'),
                ),
                //from
                array('author', 'a'),
                //joins
                array(
                    array('book', 'b', 'a.id = b.author_id', SelectQueryBuilder::INNER_JOIN),
                ),
                //wheres
                array(
                    array('b.price', 7.0, SelectQueryBuilder::GREATER_THAN_OR_EQUAL, null),
                ),
                //groupBys
                array(
                    array('b.id', null),
                ),
                //havings
                array(
                    array('score', 4, SelectQueryBuilder::GREATER_THAN, null),
                ),
                //orderBys
                array(
                    array('a.last_name', SelectQueryBuilder::ASC),
                    array('a.first_name', SelectQueryBuilder::ASC),
                ),
                //limit
                array(5, 0),
                //expectedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books FROM author AS a INNER JOIN book AS b ON a.id = b.author_id WHERE b.price >= ? GROUP BY b.id HAVING score > ? ORDER BY a.last_name ASC, a.first_name ASC LIMIT 5 OFFSET 0 ',
                //expectedFormattedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= ? '."\n".'GROUP BY b.id '."\n".'HAVING score > ? '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
                //expectedBoundParameters
                array(7, 4),
                //expectedQuotedBoundParameters
                array(7, 4),
                //expectedDebuggedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= 7 '."\n".'GROUP BY b.id '."\n".'HAVING score > 4 '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
            ),
            array(
                //select
                array(
                    array('a.first_name'),
                    array('a.last_name'),
                    array('count(b.id)', 'books'),
                ),
                //from
                array('author', 'a'),
                //joins
                array(
                    array('book', 'b', 'a.id = b.author_id', SelectQueryBuilder::INNER_JOIN),
                ),
                //wheres
                array(
                    array('b.price >= ? ', 7.0, SelectQueryBuilder::RAW_CRITERIA, null),
                ),
                //groupBys
                array(
                    array('b.id', null),
                ),
                //havings
                array(
                    array('score > ? ', 4, SelectQueryBuilder::RAW_CRITERIA, null),
                ),
                //orderBys
                array(
                    array('a.last_name', SelectQueryBuilder::ASC),
                    array('a.first_name', SelectQueryBuilder::ASC),
                ),
                //limit
                array(5, 0),
                //expectedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books FROM author AS a INNER JOIN book AS b ON a.id = b.author_id WHERE b.price >= ? GROUP BY b.id HAVING score > ? ORDER BY a.last_name ASC, a.first_name ASC LIMIT 5 OFFSET 0 ',
                //expectedFormattedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= ? '."\n".'GROUP BY b.id '."\n".'HAVING score > ? '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
                //expectedBoundParameters
                array(7, 4),
                //expectedQuotedBoundParameters
                array(7, 4),
                //expectedDebuggedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= 7 '."\n".'GROUP BY b.id '."\n".'HAVING score > 4 '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
            ),
        );
    }

    public function testQueryGetRowCount()
    {
        $this->loadSchema();
        $this->loadFixtures();

        $this->queryBuilder->from('book');
        $this->queryBuilder->where('author_id', 2);
        
        $this->assertEquals(3, $this->queryBuilder->queryGetRowCount());
    }

    public function testMergeSelect()
    {
        $this->queryBuilder->select('id');
        $this->queryBuilder->select('count(*)', 'nb');

        $qb = new SelectQueryBuilder();
        $qb->select('title');
        $qb->addOption('DISTINCT');

        $this->queryBuilder->mergeSelect($qb);

        $expected = array(
            'count(*)' => 'nb',
            'id' => null,
            'title' => null,
        );
        $this->assertEquals($expected, $this->queryBuilder->getSelectParts());
        $this->assertEquals(array('DISTINCT'), $this->queryBuilder->getOptions());
    }

    public function testMergeJoin()
    {
        $this->queryBuilder->join('author', 'a', 'a.id = b.author_id', SelectQueryBuilder::INNER_JOIN);

        $qb = new SelectQueryBuilder();
        $qb->join('editor', 'e', 'e.id = b.editor_id', SelectQueryBuilder::LEFT_JOIN);

        $this->queryBuilder->mergeJoin($qb);

        $expected = array(
            array(
                'table' => 'author',
                'criteria' =>
                array(
                   'a.id = b.author_id',
                ),
                'type' => SelectQueryBuilder::INNER_JOIN,
                'alias' => 'a',
            ),
            array(
                'table' => 'editor',
                'criteria' =>
                array(
                    'e.id = b.editor_id',
                ),
                'type' => SelectQueryBuilder::LEFT_JOIN,
                'alias' => 'e',
            ),
        );

        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }
    
    public function testMergeGroupBy()
    {
        $this->queryBuilder->groupBy('id');

        $qb = new SelectQueryBuilder();
        $qb->groupBy('score', SelectQueryBuilder::ASC);

        $this->queryBuilder->mergeGroupBy($qb);

        $expected = array(
            array (
                'column' => 'id',
                'order' => NULL,
            ),
            array (
                'column' => 'score',
                'order' => SelectQueryBuilder::ASC,
            ),
        );

        $this->assertEquals($expected, $this->queryBuilder->getGroupByParts());
    }
    
    public function testMergeHaving()
    {
        $this->queryBuilder->having('score', 5 , SelectQueryBuilder::LESS_THAN);

        $qb = new SelectQueryBuilder();
        $qb
            ->openHaving(SelectQueryBuilder::LOGICAL_OR)
            ->having('price', 9 , SelectQueryBuilder::NOT_EQUALS, null)
            ->closeHaving();

        $this->queryBuilder->mergeHaving($qb);

        $expected = array(
          array (
            'column' => 'score',
            'value' => 5,
            'operator' => '<',
            'connector' => 'AND',
          ),
          array (
            'bracket' => '(',
            'connector' => 'OR',
          ),
          array (
            'column' => 'price',
            'value' => 9,
            'operator' => '!=',
            'connector' => 'AND',
          ),
          array (
            'bracket' => ')',
            'connector' => NULL,
          ),
        );

        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }
    
    public function testMergeOrderBy()
    {
        $this->queryBuilder->orderBy('price', SelectQueryBuilder::DESC);

        $qb = new SelectQueryBuilder();
        $qb->orderBy('score', SelectQueryBuilder::ASC);

        $this->queryBuilder->mergeOrderBy($qb);

        $expected = array(
              array (
                'column' => 'price',
                'order' => SelectQueryBuilder::DESC,
              ),
              array (
                'column' => 'score',
                'order' => SelectQueryBuilder::ASC,
              ),
        );

//        echo var_export($this->queryBuilder->getOrderByParts());
        $this->assertEquals($expected, $this->queryBuilder->getOrderByParts());
    }
    
    public function testMergeLimit()
    {
        $this->queryBuilder
                ->limit(20)
                ->offset(10);

        $qb = new SelectQueryBuilder();
        $qb
            ->limit(50)
            ->offset(0);

        $this->queryBuilder->mergeLimit($qb);

        $this->assertEquals(50, $this->queryBuilder->getLimit());
        $this->assertEquals(0, $this->queryBuilder->getOffset());
    }
    
    /**
     *
     * @dataProvider mergeProvider
     */
    public function testMerge($overwriteLimit, $mergeOrderBy, $expectedQuery, $expectedBoundParameters)
    {
        $this->queryBuilder
            ->from('book', 'b')
            ->select('id')
            ->select('count(*)', 'nb')
            ->join('author', 'a', 'a.id = b.author_id', SelectQueryBuilder::INNER_JOIN)
            ->where('id', 5 , SelectQueryBuilder::LESS_THAN)
            ->groupBy('id')
            ->having('score', 5 , SelectQueryBuilder::LESS_THAN)
            ->orderBy('price', SelectQueryBuilder::DESC)
            ->limit(20)
            ->offset(10);

        $qb = new SelectQueryBuilder();
        $qb
            ->from('book')
            ->select('title')
            ->addOption('DISTINCT')
            ->join('editor', 'e', 'e.id = b.editor_id', SelectQueryBuilder::LEFT_JOIN)
            ->openWhere(SelectQueryBuilder::LOGICAL_OR)
            ->where('title', 'Dune' , SelectQueryBuilder::NOT_EQUALS, null)
            ->closeWhere()
            ->groupBy('score', SelectQueryBuilder::ASC)
            ->openHaving(SelectQueryBuilder::LOGICAL_OR)
            ->having('price', 9 , SelectQueryBuilder::NOT_EQUALS, null)
            ->closeHaving()
            ->orderBy('score', SelectQueryBuilder::ASC)
            ->limit(50)
            ->offset(0);
       
        $this->queryBuilder->merge($qb, $overwriteLimit, $mergeOrderBy);
        $this->assertEquals($expectedQuery, $this->queryBuilder->getQueryString());
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters());
    }
    
    public function mergeProvider()
    {
        return array(
            array(
              true,
              true,
              'SELECT DISTINCT id, count(*) AS nb, title FROM book AS b INNER JOIN author AS a ON a.id = b.author_id LEFT JOIN editor AS e ON e.id = b.editor_id WHERE id < ? OR ( title != ? ) GROUP BY id, score ASC HAVING score < ? OR ( price != ? ) ORDER BY price DESC, score ASC LIMIT 50 OFFSET 0 ',
              array(5, 'Dune', 5, 9),
            ),
            array(
              false,
              true,
              'SELECT DISTINCT id, count(*) AS nb, title FROM book AS b INNER JOIN author AS a ON a.id = b.author_id LEFT JOIN editor AS e ON e.id = b.editor_id WHERE id < ? OR ( title != ? ) GROUP BY id, score ASC HAVING score < ? OR ( price != ? ) ORDER BY price DESC, score ASC LIMIT 20 OFFSET 10 ',
              array(5, 'Dune', 5, 9),
            ),
            array(
              true,
              false,
              'SELECT DISTINCT id, count(*) AS nb, title FROM book AS b INNER JOIN author AS a ON a.id = b.author_id LEFT JOIN editor AS e ON e.id = b.editor_id WHERE id < ? OR ( title != ? ) GROUP BY id, score ASC HAVING score < ? OR ( price != ? ) ORDER BY price DESC LIMIT 50 OFFSET 0 ',
              array(5, 'Dune', 5, 9),
            ),
        );
    }
}
