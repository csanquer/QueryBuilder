<?php
namespace SQL\Test;

use SQL\QueryBuilder;

/**
 * Test class for QueryBuilder.
 * Generated by PHPUnit on 2011-09-21 at 16:41:24.
 */
class QueryBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     *
     * @var \PDO 
     */
    protected static $pdo;
    
    /**
     * @var \SQL\QueryBuilder
     */
    protected $queryBuilder;

    public static function setUpBeforeClass()
    {
        try
        {
            self::$pdo = new \PDO('sqlite::memory:');
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
        }
    }
    
    public static function tearDownAfterClass()
    {
        self::$pdo = null;
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->queryBuilder = new QueryBuilder(self::$pdo);
    }

    protected function loadSchema()
    {
        $sql = <<<SQL
CREATE TABLE author
(
	id INTEGER NOT NULL PRIMARY KEY,
	first_name VARCHAR(128) NOT NULL,
	last_name VARCHAR(128) NOT NULL
);

CREATE TABLE book 
(
	id INTEGER NOT NULL PRIMARY KEY,
	title VARCHAR(255) NOT NULL,
	author_id INTEGER NOT NULL,
	published_at DATETIME,
	price DECIMAL,
	score DECIMAL
);
SQL;

        if (self::$pdo instanceof \PDO)
        {
            try
            {
                self::$pdo->exec($sql);
            }
            catch (PDOException $e)
            {
                echo $e->getMessage();
            }
        }
    }
    
    protected function loadFixtures()
    {
        $sql = <<<EOD
INSERT INTO author (id, first_name, last_name) VALUES (1 ,'John Ronald Reuel', 'Tolkien');
INSERT INTO author (id, first_name, last_name) VALUES (2 ,'Philip Kindred', 'Dick');
INSERT INTO author (id, first_name, last_name) VALUES (3 ,'Frank', 'Herbert');

INSERT INTO book (id, title, author_id, published_at, price, score) VALUES (1,'Dune', 3, '1965-01-01 00:00:00', 13.6, 5);
INSERT INTO book (id, title, author_id, published_at, price, score) VALUES (2,'The Man in the High Castles', 2, '1962-01-01 00:00:00', 6, 3);
INSERT INTO book (id, title, author_id, published_at, price, score) VALUES (3,'Do Androids Dream of Electric Sheep?', 2, '1968-01-01 00:00:00', 4.8, 4.5);
INSERT INTO book (id, title, author_id, published_at, price, score) VALUES (4,'Flow my Tears, the Policeman Said', 2, '1974-01-01 00:00:00', 9.05, NULL);
INSERT INTO book (id, title, author_id, published_at, price, score) VALUES (5,'The Hobbit', 1, '1937-09-21 00:00:00', 5.5, 4);
INSERT INTO book (id, title, author_id, published_at, price, score) VALUES (6,'The Lord of the Rings', 1, '1954-01-01 00:00:00', 12.6, 5);
EOD;

        if (self::$pdo instanceof \PDO)
        {
            try
            {
                self::$pdo->exec($sql);
            }
            catch (PDOException $e)
            {
                echo $e->getMessage();
            }
        }
    }
    
    /**
     * @todo Implement testSetPdoConnection().
     */
    public function testSetPdoConnection()
    {
        $queryBuilder = new QueryBuilder();
        $queryBuilder->setConnection(new \PDO('sqlite::memory:'));
        $this->assertInstanceOf('\PDO', $this->queryBuilder->getConnection());
    }

    public function testGetPdoConnection()
    {
        $this->assertInstanceOf('\PDO', $this->queryBuilder->getConnection());
    }
    
    /**
     * @dataProvider fromProvider
     */
    public function testFrom($table, $alias)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->from($table, $alias));
        $this->assertEquals($table, $this->queryBuilder->getFromTable());
        $this->assertEquals($alias, $this->queryBuilder->getFromAlias());
        $this->assertEquals(array('table' => $table, 'alias' => $alias), $this->queryBuilder->getFromPart());
    }
    
    public function fromProvider()
    {
        return array(
            array('book', null),
            array('author', null),
            array('book', 'b'),
            array('author', 'a'),
        );
    }

    /**
     * @dataProvider joinProvider
     */
    public function testJoin($joins, $expected)
    {
        foreach ($joins as $join)
        {
            $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->join($join[0], $join[1], $join[2], $join[3]));
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }
    
    public function joinProvider()
    {
        return array(
            array(
                array(
                    array(null, null, null, null),
                ),
                array(
                )
            ),
            array(
                array(
                    array('book', 'b', 'a.id = b.author_id', null),
                ),
                array(
                    array(
                        'table' => 'book',
                        'criteria' => array(
                            'a.id = b.author_id'
                        ),
                        'type' => QueryBuilder::INNER_JOIN,
                        'alias' => 'b'
                    ),
                )
            ),
            array(
                array(
                    array('book', 'b', 'a.id = b.author_id', QueryBuilder::INNER_JOIN),
                ),
                array(
                    array(
                        'table' => 'book',
                        'criteria' => array(
                            'a.id = b.author_id'
                        ),
                        'type' => QueryBuilder::INNER_JOIN,
                        'alias' => 'b'
                    ),
                )
            ),
            array(
                array(
                    array('edition', 'e', array('e.version = b.version','e.year = b.year'), QueryBuilder::LEFT_JOIN), 
                ),
                array(
                    array(
                        'table' => 'edition',
                        'criteria' => array(
                            'e.version = b.version',
                            'e.year = b.year'
                        ),
                        'type' => QueryBuilder::LEFT_JOIN,
                        'alias' => 'e'
                    ),
                )
            ),
            array(
                array(
                    array('book', 'b', 'a.id = b.author_id', QueryBuilder::RIGHT_JOIN),
                    array('edition', 'e', array('e.version = b.version','e.year = b.year'), QueryBuilder::LEFT_JOIN), 
                ),
                array(
                    array(
                        'table' => 'book',
                        'criteria' => array(
                            'a.id = b.author_id'
                        ),
                        'type' => QueryBuilder::RIGHT_JOIN,
                        'alias' => 'b'
                    ),
                    array(
                        'table' => 'edition',
                        'criteria' => array(
                            'e.version = b.version',
                            'e.year = b.year'
                        ),
                        'type' => QueryBuilder::LEFT_JOIN,
                        'alias' => 'e'
                    ),
                )
            ),
        );
    }
    
    public function testInnerJoin()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->innerJoin('book', 'b', 'a.id = b.author_id'));
        $expected = array(
            array(
                'table' => 'book',
                'criteria' => array(
                    'a.id = b.author_id'
                ),
                'type' => QueryBuilder::INNER_JOIN,
                'alias' => 'b'
            ),
        );
        
        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }

    public function testLeftJoin()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->leftJoin('book', 'b', 'a.id = b.author_id'));
        $expected = array(
            array(
                'table' => 'book',
                'criteria' => array(
                    'a.id = b.author_id'
                ),
                'type' => QueryBuilder::LEFT_JOIN,
                'alias' => 'b'
            ),
        );
        
        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }
    
    public function testRightJoin()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->rightJoin('book', 'b', 'a.id = b.author_id'));
        $expected = array(
            array(
                'table' => 'book',
                'criteria' => array(
                    'a.id = b.author_id'
                ),
                'type' => QueryBuilder::RIGHT_JOIN,
                'alias' => 'b'
            ),
        );
        
        $this->assertEquals($expected, $this->queryBuilder->getJoinParts());
    }
    
    /**
     * @dataProvider GetFromStringProvider
     */
    public function testGetFromString($table, $alias, $joins, $expected, $expectedFormatted)
    {
        $this->queryBuilder->from($table, $alias);
        
        foreach ($joins as $join)
        {
            $this->queryBuilder->join($join[0], $join[1], $join[2], $join[3]);
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getFromString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getFromString(true));
    }
    
    public function GetFromStringProvider()
    {
        return array(
            array(
                'book',
                null, 
                array(), 
                'FROM book ',
                'FROM book '."\n",
            ),
            array(
                'book', 
                'b', 
                array(), 
                'FROM book AS b ',
                'FROM book AS b '."\n",
            ),
            array(
                'author', 
                'a', 
                array(
                    array('book', 'b', 'a.id = b.author_id', null),
                ), 
                'FROM author AS a INNER JOIN book AS b ON a.id = b.author_id ',
                'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n",
            ),
            array(
                'author', 
                'a', 
                array(
                    array('book', 'b', 'a.id = b.author_id', QueryBuilder::RIGHT_JOIN),
                    array('edition', 'e', array('e.version = b.version','e.year = b.year'), QueryBuilder::LEFT_JOIN), 
                ), 
                'FROM author AS a RIGHT JOIN book AS b ON a.id = b.author_id LEFT JOIN edition AS e ON e.version = b.version AND e.year = b.year ',
                'FROM author AS a '."\n".'RIGHT JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'LEFT JOIN edition AS e '."\n".'ON e.version = b.version '."\n".'AND e.year = b.year '."\n",
            ),
            array(
                'author', 
                'a', 
                array(
                    array('book', 'b', 'a.id = b.author_id', null),
                    array('reward', 'r', 'author_id', QueryBuilder::LEFT_JOIN),
                ), 
                'FROM author AS a INNER JOIN book AS b ON a.id = b.author_id LEFT JOIN reward AS r ON b.author_id = r.author_id ',
                'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'LEFT JOIN reward AS r '."\n".'ON b.author_id = r.author_id '."\n",
            ),
            array(
                'book', 
                'b', 
                array(
                    array('reward', 'r', 'author_id', null),
                ), 
                'FROM book AS b INNER JOIN reward AS r ON b.author_id = r.author_id ',
                'FROM book AS b '."\n".'INNER JOIN reward AS r '."\n".'ON b.author_id = r.author_id '."\n",
            ),
        );
    }
    
    /**
     *
     * @dataProvider groupByProvider
     */
    public function testGroupBy($column, $order, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->groupBy($column, $order));
        $this->assertEquals($expected, $this->queryBuilder->getGroupByParts());
    }
    
    public function groupByProvider()
    {
        return array(
            array(
                null,
                null,
                array(
                )
            ),
            array(
                'id',
                null,
                array(
                    array('column' => 'id', 'order' => null),
                )
            ),
            array(
                'year',
                QueryBuilder::ASC,
                array(
                    array('column' => 'year', 'order' => QueryBuilder::ASC),
                )
            ),
            array(
                'id',
                QueryBuilder::DESC,
                array(
                    array('column' => 'id', 'order' => QueryBuilder::DESC),
                )
            ),
        );
    }
    
    /**
     *
     * @dataProvider getGroupByStringProvider
     */
    public function testGetGroupByString($groupBys, $expected, $expectedFormatted)
    {
        foreach ($groupBys as $groupBy)
        {
            $this->queryBuilder->groupBy($groupBy[0], $groupBy[1]);
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getGroupByString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getGroupByString(true));
    }
    
    public function getGroupByStringProvider()
    {
        return array(
            array(
                array(
                    array('year', null),
                ),
                'GROUP BY year ',
                'GROUP BY year '."\n",
            ),
            array(
                array(
                    array('id', null),
                    array('year', null),
                ),
                'GROUP BY id, year ',
                'GROUP BY id, year '."\n",
            ),
            array(
                array(
                    array('year', null),
                    array('id', QueryBuilder::ASC),
                ),
                'GROUP BY year, id ASC ',
                'GROUP BY year, id ASC '."\n",
            ),
            array(
                array(
                    array('id', QueryBuilder::DESC),
                    array('year', QueryBuilder::ASC),
                ),
                'GROUP BY id DESC, year ASC ',
                'GROUP BY id DESC, year ASC '."\n",
            ),
        );
    }
    
    /**
     *
     * @dataProvider orderByProvider
     */
    public function testOrderBy($column, $order, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->orderBy($column, $order));
        $this->assertEquals($expected, $this->queryBuilder->getOrderByParts());
    }
    
    public function orderByProvider()
    {
        return array(
            array(
                null,
                null,
                array(
                )
            ),
            array(
                'id',
                'truc',
                array(
                    array('column' => 'id', 'order' => QueryBuilder::ASC),
                )
            ),
            array(
                'id',
                null,
                array(
                    array('column' => 'id', 'order' => QueryBuilder::ASC),
                )
            ),
            array(
                'year',
                QueryBuilder::ASC,
                array(
                    array('column' => 'year', 'order' => QueryBuilder::ASC),
                )
            ),
            array(
                'id',
                QueryBuilder::DESC,
                array(
                    array('column' => 'id', 'order' => QueryBuilder::DESC),
                )
            ),
        );
    }
  
    /**
     *
     * @dataProvider getOrderByStringProvider
     */
    public function testGetOrderByString($orderBys, $expected, $expectedFormatted)
    {
        foreach ($orderBys as $orderBy)
        {
            $this->queryBuilder->orderBy($orderBy[0], $orderBy[1]);
        }
        $this->assertEquals($expected, $this->queryBuilder->getOrderByString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getOrderByString(true));
    }
    
    public function getOrderByStringProvider()
    {
        return array(
            array(
                array(
                    array(null, null),
                ),
                '',
                '',
            ),
            array(
                array(
                    array('id', null),
                ),
                'ORDER BY id ASC ',
                'ORDER BY id ASC '."\n",
            ),
            array(
                array(
                    array('id', QueryBuilder::ASC),
                ),
                'ORDER BY id ASC ',
                'ORDER BY id ASC '."\n",
            ),
            array(
                array(
                    array('id', QueryBuilder::DESC),
                ),
                'ORDER BY id DESC ',
                'ORDER BY id DESC '."\n",
            ),
            array(
                array(
                    array('id', QueryBuilder::ASC),
                    array('year', QueryBuilder::DESC),
                ),
                'ORDER BY id ASC, year DESC ',
                'ORDER BY id ASC, year DESC '."\n",
            ),
        );
    }
    
    /**
     *
     * @dataProvider limitProvider
     */
    public function testLimit($limit, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->limit($limit));
        $this->assertEquals($expected, $this->queryBuilder->getLimit());
    }
    
    public function limitProvider()
    {
        return array(
            array(null, 0),
            array(5, 5),
        );
    }
    
    /**
     *
     * @dataProvider offsetProvider
     */
    public function testOffset($offset, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->offset($offset));
        $this->assertEquals($expected, $this->queryBuilder->getOffset());
    }
    
    public function offsetProvider()
    {
        return array(
            array(null, 0),
            array(1, 1),
        );
    }

    /**
     *
     * @dataProvider getLimitStringProvider
     */
    public function testGetLimitString($limit, $expected, $expectedFormatted)
    {
        if (!empty($limit))
        {
            $this->queryBuilder->limit($limit[0]);
            if (isset($limit[1]))
            {
                $this->queryBuilder->offset($limit[1]);
            }
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getLimitString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getLimitString(true));
    }
    
    public function getLimitStringProvider()
    {
        return array(
            array(
                array(0, null),
                '',
                '',
            ),
            array(
                array(5, null),
                'LIMIT 5 OFFSET 0 ',
                'LIMIT 5 '."\n".'OFFSET 0 '."\n",
            ),
            array(
                array(5, 10),
                'LIMIT 5 OFFSET 10 ',
                'LIMIT 5 '."\n".'OFFSET 10 '."\n",
            ),
        );
    }
    
    /**
     * @dataProvider optionsProvider 
     */
    public function testOptions($option, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->addOption($option));
        $this->assertEquals($expected, $this->queryBuilder->getOptions());
    }
    
    public function optionsProvider()
    {
        return array(
            array(
                null,
                array(),
            ),
            array(
                'DISTINCT',
                array(
                    'DISTINCT'
                ),
            ),
        );
    }
    
    public function testDistinct()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->distinct());
        $this->assertEquals(array('DISTINCT'), $this->queryBuilder->getOptions());
    }
    
    public function testCalcFoundRows()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->calcFoundRows());
        $this->assertEquals(array('SQL_CALC_FOUND_ROWS'), $this->queryBuilder->getOptions());
    }

    /**
     *
     * @dataProvider selectProvider
     */
    public function testSelect($column, $alias, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->select($column, $alias));
        $this->assertEquals($expected, $this->queryBuilder->getSelectParts());
    }
    
    public function selectProvider()
    {
        return array(
            array(
                null, 
                null,
                array(),
            ),
            array(
                'id', 
                null,
                array(
                    'id' => null,
                ),
            ),
            array(
                'CONCAT(firstname, lastname)', 
                'name',
                array(
                    'CONCAT(firstname, lastname)' => 'name',
                ),
            ),
            array(
                array(
                    'id' => null,
                    'year',
                    'CONCAT(firstname, lastname)' => 'name', 
                ),
                null,
                array(
                    'id' => null,
                    'year' => null,
                    'CONCAT(firstname, lastname)' => 'name',
                ),
            ),
        );
    }
    
    /**
     *
     * @dataProvider getSelectStringProvider
     */
    public function testGetSelectString($selects, $options, $expected, $expectedFormatted)
    {
        foreach ($selects as $select)
        {
            $this->queryBuilder->select($select[0], $select[1]);
        }
        
        foreach ($options as $option)
        {
            $this->queryBuilder->addOption($option);
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getSelectString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getSelectString(true));
    }
    
    public function getSelectStringProvider()
    {
        return array(
            array(
                array(
                ),
                array(
                ),
                'SELECT * ',
                'SELECT * '."\n",
            ),
            array(
                array(
                    array('id', null,),
                    array('year', null,),
                    array('CONCAT(firstname, lastname)', 'name',),
                ),
                array(
                ),
                'SELECT id, year, CONCAT(firstname, lastname) AS name ',
                'SELECT id, year, CONCAT(firstname, lastname) AS name '."\n",
            ),
            array(
                array(
                    array('start_date', 'date',),
                ),
                array(
                    'DISTINCT',
                ),
                'SELECT DISTINCT start_date AS date ',
                'SELECT DISTINCT start_date AS date '."\n",
            ),
        );
    }
    
    /**
     *
     * @dataProvider whereProvider
     */
    public function testWhere($column, $value, $operator, $connector, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->where($column, $value, $operator, $connector));
        $this->assertEquals($expected, $this->queryBuilder->getWhereParts());
    }
    
    /**
     * @expectedException \InvalidArgumentException
     */
    public function testWhereBetweenException()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->where('id', 5, QueryBuilder::BETWEEN));
    }
    
    public function testAndWhere()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->andWhere('id', 1, QueryBuilder::EQUALS));
        $expected = array(
            array(
                'column' => 'id',
                'value' => 1,
                'operator' => QueryBuilder::EQUALS,
                'connector' => QueryBuilder::LOGICAL_AND,
            ),
        );
        $this->assertEquals($expected, $this->queryBuilder->getWhereParts());
    }
    
    public function testOrWhere()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->orWhere('id', 1, QueryBuilder::EQUALS));
        $expected = array(
            array(
                'column' => 'id',
                'value' => 1,
                'operator' => QueryBuilder::EQUALS,
                'connector' => QueryBuilder::LOGICAL_OR,
            ),
        );
        $this->assertEquals($expected, $this->queryBuilder->getWhereParts());
    }
    
    public function whereProvider()
    {
        return array(
            array(
                'id',
                1,
                null,
                null,
                array(
                    array(
                        'column' => 'id',
                        'value' => 1,
                        'operator' => QueryBuilder::EQUALS,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'id',
                1,
                QueryBuilder::GREATER_THAN_OR_EQUAL,
                QueryBuilder::LOGICAL_OR,
                array(
                    array(
                        'column' => 'id',
                        'value' => 1,
                        'operator' => QueryBuilder::GREATER_THAN_OR_EQUAL,
                        'connector' => QueryBuilder::LOGICAL_OR,
                    ),
                ),
            ),
            array(
                'published_at',
                null,
                QueryBuilder::IS_NULL,
                null,
                array(
                    array(
                        'column' => 'published_at',
                        'value' => null,
                        'operator' => QueryBuilder::IS_NULL,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'id',
                array(2,5),
                QueryBuilder::BETWEEN,
                QueryBuilder::LOGICAL_AND,
                array(
                    array(
                        'column' => 'id',
                        'value' => array(2,5),
                        'operator' => QueryBuilder::BETWEEN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'title',
                array('Dune','Fahrenheit 451'),
                QueryBuilder::IN,
                null,
                array(
                    array(
                        'column' => 'title',
                        'value' => array('Dune','Fahrenheit 451'),
                        'operator' => QueryBuilder::IN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'title',
                'Dune',
                QueryBuilder::IN,
                null,
                array(
                    array(
                        'column' => 'title',
                        'value' => array('Dune'),
                        'operator' => QueryBuilder::IN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
        );
    }
    
    /**
     * @dataProvider openWhereProvider
     */
    public function testOpenWhere($connector, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->openWhere($connector));
        $this->assertEquals($expected, $this->queryBuilder->getWhereParts());
    }
    
    public function openWhereProvider()
    {
        return array(
            array(
                null,
                array(
                    Array(
                        'bracket' => QueryBuilder::BRACKET_OPEN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    )
                ),
            ),
            array(
                QueryBuilder::LOGICAL_AND,
                array(
                    Array(
                        'bracket' => QueryBuilder::BRACKET_OPEN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    )
                ),
            ),
            array(
                QueryBuilder::LOGICAL_OR,
                array(
                    Array(
                        'bracket' => QueryBuilder::BRACKET_OPEN,
                        'connector' => QueryBuilder::LOGICAL_OR,
                    )
                ),
            ),
        );
    }
    
    public function testCloseWhere()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->closeWhere());
        $expected = array(
            Array(
                'bracket' => QueryBuilder::BRACKET_CLOSE,
                'connector' => null,
            )
        );
        $this->assertEquals($expected, $this->queryBuilder->getWhereParts());
    }

    /**
     *
     * @dataProvider getWhereStringProvider
     */
    public function testGetWhereString($wheres, $expected, $expectedFormatted, $expectedBoundParameters)
    {
        foreach ($wheres as $where)
        {
            $nbWhere = count($where);
            if ($nbWhere == 4)
            {    
                $this->queryBuilder->where($where[0], $where[1], $where[2], $where[3]);
            }
            elseif ($nbWhere >= 1 && $nbWhere <= 2)
            {
                if ($where[0] == '(')
                {
                    if (isset($where[1]))
                    {
                        $this->queryBuilder->openWhere($where[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openWhere();
                    }
                }
                elseif($where[0] == ')')
                {
                    $this->queryBuilder->closeWhere();
                }
            }
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getWhereString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getWhereString(true));
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters());
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters(false, 'where'));
        $this->assertEquals(array(), $this->queryBuilder->getBoundParameters(false, 'having'));
    }
    
    public function getWhereStringProvider()
    {
        return array(
            array(
                array(
                    array('id', 1, null, null),
                ),
                'WHERE id = ? ',
                'WHERE id = ? '."\n",
                array(
                    1,
                ),
            ),
            array(
                array(
                    array('id', 1, QueryBuilder::NOT_EQUALS, null),
                ),
                'WHERE id != ? ',
                'WHERE id != ? '."\n",
                array(
                    1,
                ),
            ),
            array(
                array(
                    array('published_at', null, QueryBuilder::IS_NULL, null),
                ),
                'WHERE published_at IS NULL ',
                'WHERE published_at IS NULL '."\n",
                array(
                ),
            ),
            array(
                array(
                    array('published_at', null, QueryBuilder::IS_NOT_NULL, null),
                ),
                'WHERE published_at IS NOT NULL ',
                'WHERE published_at IS NOT NULL '."\n",
                array(
                ),
            ),
            array(
                array(
                    array('score', array(8,15), QueryBuilder::BETWEEN, null),
                ),
                'WHERE score BETWEEN ? AND ? ',
                'WHERE score BETWEEN ? AND ? '."\n",
                array(
                    8,
                    15,
                ),
            ),
            array(
                array(
                    array('score', array(8,15), QueryBuilder::NOT_BETWEEN, null),
                ),
                'WHERE score NOT BETWEEN ? AND ? ',
                'WHERE score NOT BETWEEN ? AND ? '."\n",
                array(
                    8,
                    15,
                ),
            ),
            array(
                array(
                    array('score', array(8,12,10,9,15), QueryBuilder::IN, null),
                ),
                'WHERE score IN (?, ?, ?, ?, ?) ',
                'WHERE score IN (?, ?, ?, ?, ?) '."\n",
                array(8,12,10,9,15),
            ),
            array(
                array(
                    array('score', array(8,12,10,9,15), QueryBuilder::NOT_IN, null),
                ),
                'WHERE score NOT IN (?, ?, ?, ?, ?) ',
                'WHERE score NOT IN (?, ?, ?, ?, ?) '."\n",
                array(8,12,10,9,15),
            ),
            array(
                array(
                    array('id', 1, QueryBuilder::NOT_EQUALS, null),
                    array('score', array(8,12,10,9,15), QueryBuilder::IN, null),
                ),
                'WHERE id != ? AND score IN (?, ?, ?, ?, ?) ',
                'WHERE id != ? '."\n".'AND score IN (?, ?, ?, ?, ?) '."\n",
                array(1,8,12,10,9,15),
            ),
            array(
                array(
                    array('score', 5, QueryBuilder::LESS_THAN_OR_EQUAL, null),
                    array('score', 9, QueryBuilder::GREATER_THAN_OR_EQUAL, QueryBuilder::LOGICAL_OR),
                ),
                'WHERE score <= ? OR score >= ? ',
                'WHERE score <= ? '."\n".'OR score >= ? '."\n",
                array(5,9),
            ),
            array(
                array(
                    array('title', 'Dune', QueryBuilder::NOT_EQUALS, null),
                    array(QueryBuilder::BRACKET_OPEN, QueryBuilder::LOGICAL_OR),
                    array('score', 5, QueryBuilder::GREATER_THAN_OR_EQUAL, null),
                    array('score', 10, QueryBuilder::LESS_THAN_OR_EQUAL, QueryBuilder::LOGICAL_AND),
                    array(QueryBuilder::BRACKET_CLOSE),
                ),
                'WHERE title != ? OR ( score >= ? AND score <= ? ) ',
                'WHERE title != ? '."\n".'OR '."\n".'( '."\n".'    score >= ? '."\n".'    AND score <= ? '."\n".') '."\n",
                array('Dune', 5, 10),
            ),
            array(
                array(
                    array('title', 'Dune', QueryBuilder::NOT_EQUALS, null),
                    array(QueryBuilder::BRACKET_OPEN, QueryBuilder::LOGICAL_OR),
                    array('score', 5, QueryBuilder::GREATER_THAN_OR_EQUAL, null),
                    array('score', 10, QueryBuilder::LESS_THAN_OR_EQUAL, QueryBuilder::LOGICAL_AND),
                    array(QueryBuilder::BRACKET_OPEN, QueryBuilder::LOGICAL_OR),
                    array('published_at', '2011-10-02 00:00:00', QueryBuilder::EQUALS, null),
                    array(QueryBuilder::BRACKET_CLOSE),
                    array(QueryBuilder::BRACKET_CLOSE),
                ),
                'WHERE title != ? OR ( score >= ? AND score <= ? OR ( published_at = ? ) ) ',
                'WHERE title != ? '."\n".'OR '."\n".'( '."\n".'    score >= ? '."\n".'    AND score <= ? '."\n".'    OR '."\n".'    ( '."\n".'        published_at = ? '."\n".'    ) '."\n".') '."\n",
                array('Dune', 5, 10, '2011-10-02 00:00:00'),
            ),
            array(
                array(
                    array('title LIKE ?', '%the%', QueryBuilder::RAW_CRITERIA, null),
                ),
                'WHERE title LIKE ? ',
                'WHERE title LIKE ? '."\n",
                array(
                    '%the%',
                ),
            ),
            array(
                array(
                    array('score BETWEEN ? AND ?  ', array(5, 8), QueryBuilder::RAW_CRITERIA, null),
                ),
                'WHERE score BETWEEN ? AND ? ',
                'WHERE score BETWEEN ? AND ? '."\n",
                array(5, 8),
            ),
        );
    }

    /**
     *
     * @dataProvider havingProvider
     */
    public function testHaving($column, $value, $operator, $connector, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->having($column, $value, $operator, $connector));
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }
    
    /**
     * @expectedException \InvalidArgumentException
     */
    public function testHavingBetweenException()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->having('id', 5, QueryBuilder::BETWEEN));
    }
    
    public function testAndHaving()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->andHaving('id', 1, QueryBuilder::EQUALS));
        $expected = array(
            array(
                'column' => 'id',
                'value' => 1,
                'operator' => QueryBuilder::EQUALS,
                'connector' => QueryBuilder::LOGICAL_AND,
            ),
        );
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }
    
    public function testOrHaving()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->orHaving('id', 1, QueryBuilder::EQUALS));
        $expected = array(
            array(
                'column' => 'id',
                'value' => 1,
                'operator' => QueryBuilder::EQUALS,
                'connector' => QueryBuilder::LOGICAL_OR,
            ),
        );
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }
    
    public function havingProvider()
    {
        return array(
            array(
                'id',
                1,
                null,
                null,
                array(
                    array(
                        'column' => 'id',
                        'value' => 1,
                        'operator' => QueryBuilder::EQUALS,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'id',
                1,
                QueryBuilder::GREATER_THAN_OR_EQUAL,
                QueryBuilder::LOGICAL_OR,
                array(
                    array(
                        'column' => 'id',
                        'value' => 1,
                        'operator' => QueryBuilder::GREATER_THAN_OR_EQUAL,
                        'connector' => QueryBuilder::LOGICAL_OR,
                    ),
                ),
            ),
            array(
                'published_at',
                null,
                QueryBuilder::IS_NULL,
                null,
                array(
                    array(
                        'column' => 'published_at',
                        'value' => null,
                        'operator' => QueryBuilder::IS_NULL,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'id',
                array(2,5),
                QueryBuilder::BETWEEN,
                QueryBuilder::LOGICAL_AND,
                array(
                    array(
                        'column' => 'id',
                        'value' => array(2,5),
                        'operator' => QueryBuilder::BETWEEN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'title',
                array('Dune','Fahrenheit 451'),
                QueryBuilder::IN,
                null,
                array(
                    array(
                        'column' => 'title',
                        'value' => array('Dune','Fahrenheit 451'),
                        'operator' => QueryBuilder::IN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
            array(
                'title',
                'Dune',
                QueryBuilder::IN,
                null,
                array(
                    array(
                        'column' => 'title',
                        'value' => array('Dune'),
                        'operator' => QueryBuilder::IN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    ),
                ),
            ),
        );
    }
    
    /**
     * @dataProvider openHavingProvider
     */
    public function testOpenHaving($connector, $expected)
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->openHaving($connector));
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }
    
    public function openHavingProvider()
    {
        return array(
            array(
                null,
                array(
                    Array(
                        'bracket' => QueryBuilder::BRACKET_OPEN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    )
                ),
            ),
            array(
                QueryBuilder::LOGICAL_AND,
                array(
                    Array(
                        'bracket' => QueryBuilder::BRACKET_OPEN,
                        'connector' => QueryBuilder::LOGICAL_AND,
                    )
                ),
            ),
            array(
                QueryBuilder::LOGICAL_OR,
                array(
                    Array(
                        'bracket' => QueryBuilder::BRACKET_OPEN,
                        'connector' => QueryBuilder::LOGICAL_OR,
                    )
                ),
            ),
        );
    }
    
    public function testCloseHaving()
    {
        $this->assertInstanceOf('SQL\QueryBuilder',$this->queryBuilder->closeHaving());
        $expected = array(
            Array(
                'bracket' => QueryBuilder::BRACKET_CLOSE,
                'connector' => null,
            )
        );
        $this->assertEquals($expected, $this->queryBuilder->getHavingParts());
    }

    /**
     *
     * @dataProvider getHavingStringProvider
     */
    public function testGetHavingString($havings, $expected, $expectedFormatted, $expectedBoundParameters)
    {
        foreach ($havings as $having)
        {
            $nbHaving = count($having);
            if ($nbHaving == 4)
            {    
                $this->queryBuilder->having($having[0], $having[1], $having[2], $having[3]);
            }
            elseif ($nbHaving >= 1 && $nbHaving <= 2)
            {
                if ($having[0] == '(')
                {
                    if (isset($having[1]))
                    {
                        $this->queryBuilder->openHaving($having[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openHaving();
                    }
                }
                elseif($having[0] == ')')
                {
                    $this->queryBuilder->closeHaving();
                }
            }
        }
        
        $this->assertEquals($expected, $this->queryBuilder->getHavingString());
        $this->assertEquals($expectedFormatted, $this->queryBuilder->getHavingString(true));
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters());
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters(false, 'having'));
        $this->assertEquals(array(), $this->queryBuilder->getBoundParameters(false, 'where'));
    }
    
    public function getHavingStringProvider()
    {
        return array(
            array(
                array(
                    array('id', 1, null, null),
                ),
                'HAVING id = ? ',
                'HAVING id = ? '."\n",
                array(
                    1,
                ),
            ),
            array(
                array(
                    array('id', 1, QueryBuilder::NOT_EQUALS, null),
                ),
                'HAVING id != ? ',
                'HAVING id != ? '."\n",
                array(
                    1,
                ),
            ),
            array(
                array(
                    array('published_at', null, QueryBuilder::IS_NULL, null),
                ),
                'HAVING published_at IS NULL ',
                'HAVING published_at IS NULL '."\n",
                array(
                ),
            ),
            array(
                array(
                    array('published_at', null, QueryBuilder::IS_NOT_NULL, null),
                ),
                'HAVING published_at IS NOT NULL ',
                'HAVING published_at IS NOT NULL '."\n",
                array(
                ),
            ),
            array(
                array(
                    array('score', array(8,15), QueryBuilder::BETWEEN, null),
                ),
                'HAVING score BETWEEN ? AND ? ',
                'HAVING score BETWEEN ? AND ? '."\n",
                array(
                    8,
                    15,
                ),
            ),
            array(
                array(
                    array('score', array(8,15), QueryBuilder::NOT_BETWEEN, null),
                ),
                'HAVING score NOT BETWEEN ? AND ? ',
                'HAVING score NOT BETWEEN ? AND ? '."\n",
                array(
                    8,
                    15,
                ),
            ),
            array(
                array(
                    array('score', array(8,12,10,9,15), QueryBuilder::IN, null),
                ),
                'HAVING score IN (?, ?, ?, ?, ?) ',
                'HAVING score IN (?, ?, ?, ?, ?) '."\n",
                array(8,12,10,9,15),
            ),
            array(
                array(
                    array('score', array(8,12,10,9,15), QueryBuilder::NOT_IN, null),
                ),
                'HAVING score NOT IN (?, ?, ?, ?, ?) ',
                'HAVING score NOT IN (?, ?, ?, ?, ?) '."\n",
                array(8,12,10,9,15),
            ),
            array(
                array(
                    array('id', 1, QueryBuilder::NOT_EQUALS, null),
                    array('score', array(8,12,10,9,15), QueryBuilder::IN, null),
                ),
                'HAVING id != ? AND score IN (?, ?, ?, ?, ?) ',
                'HAVING id != ? '."\n".'AND score IN (?, ?, ?, ?, ?) '."\n",
                array(1,8,12,10,9,15),
            ),
            array(
                array(
                    array('score', 5, QueryBuilder::LESS_THAN_OR_EQUAL, null),
                    array('score', 9, QueryBuilder::GREATER_THAN_OR_EQUAL, QueryBuilder::LOGICAL_OR),
                ),
                'HAVING score <= ? OR score >= ? ',
                'HAVING score <= ? '."\n".'OR score >= ? '."\n",
                array(5,9),
            ),
            array(
                array(
                    array('title', 'Dune', QueryBuilder::NOT_EQUALS, null),
                    array(QueryBuilder::BRACKET_OPEN, QueryBuilder::LOGICAL_OR),
                    array('score', 5, QueryBuilder::GREATER_THAN_OR_EQUAL, null),
                    array('score', 10, QueryBuilder::LESS_THAN_OR_EQUAL, QueryBuilder::LOGICAL_AND),
                    array(QueryBuilder::BRACKET_CLOSE),
                ),
                'HAVING title != ? OR ( score >= ? AND score <= ? ) ',
                'HAVING title != ? '."\n".'OR '."\n".'( '."\n".'    score >= ? '."\n".'    AND score <= ? '."\n".') '."\n",
                array('Dune', 5, 10),
            ),
            array(
                array(
                    array('title', 'Dune', QueryBuilder::NOT_EQUALS, null),
                    array(QueryBuilder::BRACKET_OPEN, QueryBuilder::LOGICAL_OR),
                    array('score', 5, QueryBuilder::GREATER_THAN_OR_EQUAL, null),
                    array('score', 10, QueryBuilder::LESS_THAN_OR_EQUAL, QueryBuilder::LOGICAL_AND),
                    array(QueryBuilder::BRACKET_OPEN, QueryBuilder::LOGICAL_OR),
                    array('published_at', '2011-10-02 00:00:00', QueryBuilder::EQUALS, null),
                    array(QueryBuilder::BRACKET_CLOSE),
                    array(QueryBuilder::BRACKET_CLOSE),
                ),
                'HAVING title != ? OR ( score >= ? AND score <= ? OR ( published_at = ? ) ) ',
                'HAVING title != ? '."\n".'OR '."\n".'( '."\n".'    score >= ? '."\n".'    AND score <= ? '."\n".'    OR '."\n".'    ( '."\n".'        published_at = ? '."\n".'    ) '."\n".') '."\n",
                array('Dune', 5, 10, '2011-10-02 00:00:00'),
            ),
        );
    }
 
    /**
     * @dataProvider debugQueryProvider
     */
    public function testDebugQuery($query, $params, $expected, $expectedQuoted, $expectedQuotedPDO)
    {
        $this->assertEquals($expected, QueryBuilder::debugQuery($query, $params, false));
        $this->assertEquals($expectedQuoted, QueryBuilder::debugQuery($query, $params, true));
        $this->assertEquals($expectedQuotedPDO, QueryBuilder::debugQuery($query, $params, true, self::$pdo));
    }
    
    public function debugQueryProvider()
    {
        return array(
            array(
                'SELECT * FROM book b WHERE b.title = ?', 
                array('l\'île au trésor'),
                'SELECT * FROM book b WHERE b.title = \'l\'île au trésor\'',
                'SELECT * FROM book b WHERE b.title = \'l\\\'île au trésor\'',
                'SELECT * FROM book b WHERE b.title = \'l\'\'île au trésor\'',
            ),
            array(
                'SELECT * FROM book b WHERE b.title = :title', 
                array('title' => 'l\'île au trésor'),
                'SELECT * FROM book b WHERE b.title = \'l\'île au trésor\'',
                'SELECT * FROM book b WHERE b.title = \'l\\\'île au trésor\'',
                'SELECT * FROM book b WHERE b.title = \'l\'\'île au trésor\'',
            ),
            array(
                'SELECT * FROM book b WHERE b.title = :title', 
                array(':title' => 'l\'île au trésor'),
                'SELECT * FROM book b WHERE b.title = \'l\'île au trésor\'',
                'SELECT * FROM book b WHERE b.title = \'l\\\'île au trésor\'',
                'SELECT * FROM book b WHERE b.title = \'l\'\'île au trésor\'',
            ),
        );
    }
    
    /**
     * @dataProvider getQueryStringProvider
     */
    public function testGetQueryString($selects, $from, $joins, $wheres, $groupBys, $havings, $orderBys, $limit, $expectedQuery, $expectedFormattedQuery, $expectedBoundParameters, $expectedQuotedBoundParameters, $expectedDebuggedQuery)
    {
        foreach ($selects as $select)
        {
            $this->queryBuilder->select($select[0], isset($select[1]) ? $select[1] : null);
        }
        
        $this->queryBuilder->from($from[0], isset($from[1]) ? $from[1] : null);
        
        foreach ($joins as $join)
        {
            $this->queryBuilder->join($join[0], isset($join[1]) ? $join[1] : null, isset($join[2]) ? $join[2] : null, isset($join[3]) ? $join[3] : null);
        }
        
        foreach ($wheres as $where)
        {
            $nbWhere = count($where);
            if ($nbWhere == 4)
            {    
                $this->queryBuilder->where($where[0], $where[1], $where[2], $where[3]);
            }
            elseif ($nbWhere >= 1 && $nbWhere <= 2)
            {
                if ($where[0] == '(')
                {
                    if (isset($where[1]))
                    {
                        $this->queryBuilder->openWhere($where[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openWhere();
                    }
                }
                elseif($where[0] == ')')
                {
                    $this->queryBuilder->closeWhere();
                }
            }
        }
        
        foreach ($groupBys as $groupBy)
        {
            $this->queryBuilder->groupBy($groupBy[0], $groupBy[1]);
        }
        
        foreach ($havings as $having)
        {
            $nbHaving = count($having);
            if ($nbHaving == 4)
            {    
                $this->queryBuilder->having($having[0], $having[1], $having[2], $having[3]);
            }
            elseif ($nbHaving >= 1 && $nbHaving <= 2)
            {
                if ($having[0] == '(')
                {
                    if (isset($having[1]))
                    {
                        $this->queryBuilder->openHaving($having[1]);
                    }
                    else
                    {
                        $this->queryBuilder->openHaving();
                    }
                }
                elseif($having[0] == ')')
                {
                    $this->queryBuilder->closeHaving();
                }
            }
        }
        
        foreach ($orderBys as $orderBy)
        {
            $this->queryBuilder->orderBy($orderBy[0], $orderBy[1]);
        }
        
        if (!empty($limit))
        {
            $this->queryBuilder->limit($limit[0]);
            if (isset($limit[1]))
            {
                $this->queryBuilder->offset($limit[1]);
            }
        }
        
        $this->assertEquals($expectedQuery, $this->queryBuilder->getQueryString());
        $this->assertEquals($expectedQuery, (string) $this->queryBuilder);
        $this->assertEquals($expectedFormattedQuery, $this->queryBuilder->getQueryString(true));
        $this->assertEquals($expectedBoundParameters, $this->queryBuilder->getBoundParameters());
        $this->assertEquals($expectedQuotedBoundParameters, $this->queryBuilder->getBoundParameters(true));
        $this->assertEquals($expectedDebuggedQuery, $this->queryBuilder->debug());
    }
   
    public function getQueryStringProvider()
    {
        return array(
            array(
                //select
                array(),
                //from
                array('book'),
                //joins
                array(),
                //wheres
                array(
                    array('title', 'l\'île au trésor', null, null),
                ),
                //groupBys
                array(),
                //havings
                array(),
                //orderBys
                array(),
                //limit
                array(),
                //expectedQuery
                'SELECT * FROM book WHERE title = ? ',
                //expectedFormattedQuery
                'SELECT * '."\n".'FROM book '."\n".'WHERE title = ? '."\n",
                //expectedBoundParameters
                array('l\'île au trésor'),
                //expectedQuotedBoundParameters
                array('\'l\'\'île au trésor\''),
                //expectedDebuggedQuery
                'SELECT * '."\n".'FROM book '."\n".'WHERE title = \'l\'\'île au trésor\' '."\n",
            ),
            array(
                //select
                array(
                    array('a.first_name'),
                    array('a.last_name'),
                    array('count(b.id)','books'),
                ),
                //from
                array('author', 'a'),
                //joins
                array(
                    array('book', 'b', 'a.id = b.author_id', QueryBuilder::INNER_JOIN),
                ),
                //wheres
                array(
                    array('b.price', 7.0, QueryBuilder::GREATER_THAN_OR_EQUAL, null),
                ),
                //groupBys
                array(
                    array('b.id', null),
                ),
                //havings
                array(
                    array('score', 4, QueryBuilder::GREATER_THAN, null),
                ),
                //orderBys
                array(
                    array('a.last_name', QueryBuilder::ASC),
                    array('a.first_name', QueryBuilder::ASC),
                ),
                //limit
                array(5,0),
                //expectedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books FROM author AS a INNER JOIN book AS b ON a.id = b.author_id WHERE b.price >= ? GROUP BY b.id HAVING score > ? ORDER BY a.last_name ASC, a.first_name ASC LIMIT 5 OFFSET 0 ',
                //expectedFormattedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= ? '."\n".'GROUP BY b.id '."\n".'HAVING score > ? '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
                //expectedBoundParameters
                array(7, 4),
                //expectedQuotedBoundParameters
                array(7, 4),
                //expectedDebuggedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= 7 '."\n".'GROUP BY b.id '."\n".'HAVING score > 4 '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
            ),
            array(
                //select
                array(
                    array('a.first_name'),
                    array('a.last_name'),
                    array('count(b.id)','books'),
                ),
                //from
                array('author', 'a'),
                //joins
                array(
                    array('book', 'b', 'a.id = b.author_id', QueryBuilder::INNER_JOIN),
                ),
                //wheres
                array(
                    array('b.price >= ? ', 7.0, QueryBuilder::RAW_CRITERIA, null),
                ),
                //groupBys
                array(
                    array('b.id', null),
                ),
                //havings
                array(
                    array('score > ? ', 4, QueryBuilder::RAW_CRITERIA, null),
                ),
                //orderBys
                array(
                    array('a.last_name', QueryBuilder::ASC),
                    array('a.first_name', QueryBuilder::ASC),
                ),
                //limit
                array(5,0),
                //expectedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books FROM author AS a INNER JOIN book AS b ON a.id = b.author_id WHERE b.price >= ? GROUP BY b.id HAVING score > ? ORDER BY a.last_name ASC, a.first_name ASC LIMIT 5 OFFSET 0 ',
                //expectedFormattedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= ? '."\n".'GROUP BY b.id '."\n".'HAVING score > ? '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
                //expectedBoundParameters
                array(7, 4),
                //expectedQuotedBoundParameters
                array(7, 4),
                //expectedDebuggedQuery
                'SELECT a.first_name, a.last_name, count(b.id) AS books '."\n".'FROM author AS a '."\n".'INNER JOIN book AS b '."\n".'ON a.id = b.author_id '."\n".'WHERE b.price >= 7 '."\n".'GROUP BY b.id '."\n".'HAVING score > 4 '."\n".'ORDER BY a.last_name ASC, a.first_name ASC '."\n".'LIMIT 5 '."\n".'OFFSET 0 '."\n",
            ),
        );
    }
    
    public function testQuote()
    {
        $this->assertEquals("''' AND 1'", $this->queryBuilder->quote("' AND 1"));
        
        $quote1 = $this->queryBuilder->quote(1);
        $this->assertInternalType('integer', $quote1);
        $this->assertEquals(1, $quote1);
        
        $quote2 = $this->queryBuilder->quote('2');
        $this->assertInternalType('string', $quote2);
        $this->assertEquals('\'2\'', $quote2);
        
        $queryBuilder = new QueryBuilder();
        
        $quote3 = $queryBuilder->quote(1);
        $this->assertInternalType('integer', $quote3);
        $this->assertEquals(1, $quote3);
        
        $quote4 = $queryBuilder->quote('2');
        $this->assertInternalType('string', $quote4);
        $this->assertEquals('\'2\'', $quote4);
        
        $this->assertEquals("'\' AND 1'", $queryBuilder->quote("' AND 1"));
    }
    
    public function testQueryWithoutPDO()
    {
        $querybuiler = new QueryBuilder();
        $querybuiler->from('book');
        $this->assertFalse($querybuiler->query());
    }
    
    public function testQueryWithoutQueryStatement()
    {
        $this->assertFalse($this->queryBuilder->query());
    }
    
    public function testQuery()
    {
        $this->loadSchema();
        $this->loadFixtures();
        
        $this->queryBuilder->from('book');
        $this->queryBuilder->where('author_id', 2);
        
        $this->assertInstanceOf('\PDOStatement', $this->queryBuilder->query());
        
        $expected = array(
            array(
                'id' => '2',
                'title' => 'The Man in the High Castles',
                'author_id' => '2',
                'published_at' => '1962-01-01 00:00:00',
                'price' => '6',
                'score' => '3',
            ),
            array(
                'id' => '3',
                'title' => 'Do Androids Dream of Electric Sheep?',
                'author_id' => '2',
                'published_at' => '1968-01-01 00:00:00',
                'price' => '4.8',
                'score' => '4.5',
            ),
            array(
                'id' => '4',
                'title' => 'Flow my Tears, the Policeman Said',
                'author_id' => '2',
                'published_at' => '1974-01-01 00:00:00',
                'price' => '9.05',
                'score' => NULL,
            ),
        );
        
        $this->assertEquals($expected, $this->queryBuilder->query(\PDO::FETCH_ASSOC));
        
        return $this->queryBuilder;
    }
    
    /**
     * @depends testQuery
     */
    public function testQueryGetRowCount(QueryBuilder $queryBuilder)
    {
        $this->assertEquals(3, $queryBuilder->queryGetRowCount());
    }
}
